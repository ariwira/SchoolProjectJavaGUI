/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Point2D;
import java.util.Vector;
import javax.swing.ImageIcon;
/**
 *
 * @author ariwra
 */
public class PanelOrder extends javax.swing.JPanel implements MouseMotionListener, MouseListener {
    PanelIsi content = new PanelIsi();
    TransactionForm trans;
    ImageIcon MejaKotak,MejaBulat,MejaKotakPutar;
    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        ImageIcon background = new ImageIcon(new ImageIcon("Assets/background.png").getImage().getScaledInstance(850, 500, Image.SCALE_DEFAULT));
        background.paintIcon(this, g, 0, 0);
        if(trans.KondisiMeja == 1){
            MejaKotak = new ImageIcon(new ImageIcon("Assets/table1U.png").getImage().getScaledInstance(190, 70, Image.SCALE_DEFAULT));
            MejaKotakPutar = new ImageIcon(new ImageIcon("Assets/table3U.jpg").getImage().getScaledInstance(70, 190, Image.SCALE_DEFAULT));
            MejaBulat = new ImageIcon(new ImageIcon("Assets/table2U.png").getImage().getScaledInstance(80, 80, Image.SCALE_DEFAULT));
            repaint();
        }else{
            MejaKotak = new ImageIcon(new ImageIcon("Assets/table1A.png").getImage().getScaledInstance(190, 70, Image.SCALE_DEFAULT));
            MejaKotakPutar = new ImageIcon(new ImageIcon("Assets/table3A.jpg").getImage().getScaledInstance(70, 190, Image.SCALE_DEFAULT));
            MejaBulat = new ImageIcon(new ImageIcon("Assets/table2A.png").getImage().getScaledInstance(80, 80, Image.SCALE_DEFAULT));
            repaint();
            
        }
           
        for (int i = 0; i < content.titik.size(); i++) {
            Point2D p2d = content.titik.elementAt(i);
            int type = content.tableType.elementAt(i);
            if (type == 1) {
                //RectPenampung.add(new Object(tableRect.paintIcon(this, g, ((Point)p2d).x, ((Point)p2d).y));
                MejaKotak.paintIcon(this, g, ((Point)p2d).x, ((Point)p2d).y);
            }
            else if (type == 2){
                MejaBulat.paintIcon(this, g, ((Point)p2d).x, ((Point)p2d).y);
            }
            else if(type == 3){
                MejaKotakPutar.paintIcon(this, g, ((Point)p2d).x, ((Point)p2d).y);
            }
        }
        
        
        
    }
    /**
     * Creates new form PanelOrder
     */
    public PanelOrder() {
        trans = new TransactionForm();
        MejaKotak = new ImageIcon(new ImageIcon("Assets/table1A.png").getImage().getScaledInstance(190, 70, Image.SCALE_DEFAULT));
        MejaBulat = new ImageIcon(new ImageIcon("Assets/table2A.png").getImage().getScaledInstance(80, 80, Image.SCALE_DEFAULT));
        MejaKotakPutar = new ImageIcon(new ImageIcon("Assets/table3A.jpg").getImage().getScaledInstance(70, 190, Image.SCALE_DEFAULT));
        
        initComponents();
        setSize(850, 500);
        addMouseMotionListener(this);
        addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        for(int i = 0;i<content.titik.size();i++)
        {       
            if(content.tableType.elementAt(i)==1){
                if(content.titik.elementAt(i).getX() < e.getX() && content.titik.elementAt(i).getX() + 190 > e.getX() && content.titik.elementAt(i).getY() < e.getY() && content.titik.elementAt(i).getY() + 70 > e.getY()){
                   trans.setVisible(true);
                }
            }else if(content.tableType.elementAt(i)==2){
                if(content.titik.elementAt(i).getX() < e.getX() && content.titik.elementAt(i).getX() + 80 > e.getX() && content.titik.elementAt(i).getY() < e.getY() && content.titik.elementAt(i).getY() + 80 > e.getY()){
                   trans.setVisible(true);
                }
            }else if(content.tableType.elementAt(i)==3){
                if(content.titik.elementAt(i).getX() < e.getX() && content.titik.elementAt(i).getX() + 70 > e.getX() && content.titik.elementAt(i).getY() < e.getY() && content.titik.elementAt(i).getY() + 190 > e.getY()){
                   trans.setVisible(true);
                }
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
}
